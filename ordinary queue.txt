package pratical2;

import java.util.Scanner;

public class SimpleQueue {

    private int[] queueArray;  // Array to store queue elements
    private int maxSize;       // Maximum size of the queue
    private int front;         // Points to the front of the queue
    private int rear;          // Points to the rear of the queue
    private int itemCount;     // Number of elements in the queue

    // Constructor to initialize the queue
    public SimpleQueue(int size) {
        maxSize = size;
        queueArray = new int[maxSize];
        front = 0;
        rear = -1;
        itemCount = 0;
    }

    // Method to add an element to the queue (Enqueue)
    public void enqueue(int value) {
        if (isFull()) {
            System.out.println("Queue is full. Unable to enqueue " + value);
        } else {
            rear = (rear + 1) % maxSize;  // Wrap around if rear reaches the end
            queueArray[rear] = value;
            itemCount++;
            System.out.println(value + " enqueued to queue.");
        }
    }

    // Method to remove and return the front element from the queue (Dequeue)
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Unable to dequeue.");
            return -1;
        } else {
            int dequeuedValue = queueArray[front];
            front = (front + 1) % maxSize;  // Wrap around if front reaches the end
            itemCount--;
            System.out.println(dequeuedValue + " dequeued from queue.");
            return dequeuedValue;
        }
    }

    // Method to return the front element without removing it (Peek)
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return -1;
        } else {
            return queueArray[front];
        }
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return (itemCount == 0);
    }

    // Method to check if the queue is full
    public boolean isFull() {
        return (itemCount == maxSize);
    }

    // Method to display the queue elements
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            System.out.println("Queue elements:");
            int current = front;
            for (int i = 0; i < itemCount; i++) {
                System.out.print(queueArray[current] + " ");
                current = (current + 1) % maxSize;  // Wrap around using modulo
            }
            System.out.println();
        }
    }

    // Main method to demonstrate queue functionality
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ask for the size of the queue
        System.out.print("Enter the size of the queue: ");
        int size = scanner.nextInt();
        SimpleQueue queue = new SimpleQueue(size);  // Create a queue with user-specified size

        int choice;
        do {
            // Menu of queue operations
            System.out.println("\nQueue Operations Menu:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Display");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    // Enqueue operation
                    System.out.print("Enter value to enqueue: ");
                    int value = scanner.nextInt();
                    queue.enqueue(value);
                    break;
                case 2:
                    // Dequeue operation
                    queue.dequeue();
                    break;
                case 3:
                    // Peek operation
                    int frontElement = queue.peek();
                    if (frontElement != -1) {
                        System.out.println("Front element is: " + frontElement);
                    }
                    break;
                case 4:
                    // Display operation
                    queue.display();
                    break;
                case 5:
                    // Exit operation
                    System.out.println("Exiting...");
                    break;
                default:
                    // Invalid choice
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 5);  // Exit when choice is 5

        scanner.close();
    }
}

