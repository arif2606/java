import java.util.Scanner;

//CNode class represents a node in the circular doubly linked list
class CNode {
 int data;
 CNode next;
 CNode prev;

 // Constructor to initialize node with data
 public CNode(int data) {
     this.data = data;
     this.next = null;
     this.prev = null;
 }
}

//CircularDoublyLinkedList class that defines operations on the circular doubly linked list
class CircularDoublyLinkedList {
 private CNode start = null;  // Points to the first node
 private CNode last = null;   // Points to the last node

 // Method to create a circular doubly linked list with given nodes
 public void create() {
     Scanner scanner = new Scanner(System.in);
     System.out.print("How many nodes do you want to create? ");
     int count = scanner.nextInt();  // Number of nodes to create

     for (int i = 0; i < count; i++) {
         System.out.print("Enter data for node " + (i + 1) + ": ");
         int data = scanner.nextInt();  // Data for each node

         CNode newNode = new CNode(data);  // Create a new node with the given data
         if (start == null) {
             start = last = newNode;
             start.next = start;  // Circular link to itself
             start.prev = start;  // Doubly link to itself
         } else {
             newNode.prev = last;
             last.next = newNode;  // Link the last node to the new node
             last = newNode;       // Update last to point to the new node
             last.next = start;    // Circular link from the last to the first node
             start.prev = last;    // Doubly link the start node to the last node
         }
     }
 }

 // Method to display the elements of the circular doubly linked list
 public void display() {
     if (start == null) {
         System.out.println("List is empty.");
         return;
     }
     CNode temp = start;
     System.out.print("List elements: ");
     do {
         System.out.print(temp.data + " ");
         temp = temp.next;  // Move to the next node
     } while (temp != start);  // Stop when we reach the start node again
     System.out.println();
 }

 // Method to insert a node at a specific position or at the beginning or end
 public void insert() {
     Scanner scanner = new Scanner(System.in);
     System.out.print("Enter data to be inserted: ");
     int data = scanner.nextInt();  // Data to insert
     CNode newNode = new CNode(data);  // Create a new node with the given data

     System.out.println("Choose insertion option:\n1. At the beginning\n2. At the end\n3. At a specific position");
     int choice = scanner.nextInt();  // Choose where to insert the node

     switch (choice) {
         case 1:  // Insert at the beginning
             if (start == null) {
                 start = last = newNode;
                 start.next = start;  // Circular link to itself
                 start.prev = start;  // Doubly link to itself
             } else {
                 newNode.next = start;  // New node's next points to the start
                 newNode.prev = last;   // New node's prev points to the last node
                 start.prev = newNode;  // Start node's prev points to the new node
                 last.next = newNode;   // Last node's next points to the new node
                 start = newNode;       // Update start to point to the new node
             }
             break;

         case 2:  // Insert at the end
             if (start == null) {
                 start = last = newNode;
                 start.next = start;  // Circular link to itself
                 start.prev = start;  // Doubly link to itself
             } else {
                 newNode.prev = last;  // New node's prev points to the last node
                 newNode.next = start; // New node's next points to the start (circular link)
                 last.next = newNode;  // Last node's next points to the new node
                 start.prev = newNode; // Start node's prev points to the new node
                 last = newNode;       // Update last to point to the new node
             }
             break;

         case 3:  // Insert at a specific position
             System.out.print("Enter the position for insertion (1-based index): ");
             int pos = scanner.nextInt();  // Position where the node should be inserted
             if (pos <= 1) {
                 System.out.println("Invalid position.");
                 break;
             }
             CNode temp = start;
             for (int i = 1; i < pos - 1 && temp.next != start; i++) {
                 temp = temp.next;  // Traverse to the (pos-1)-th node
             }
             newNode.next = temp.next;    // New node's next points to the next node
             newNode.prev = temp;         // New node's prev points to the current node
             temp.next.prev = newNode;    // Next node's prev points to the new node
             temp.next = newNode;         // Current node's next points to the new node
             if (newNode.next == start) {
                 last = newNode;  // Update last if inserted at the end
             }
             break;

         default:
             System.out.println("Invalid choice.");
     }
 }

 // Method to delete a node from the list
 public void delete() {
     Scanner scanner = new Scanner(System.in);
     System.out.println("Choose deletion option:\n1. Delete from the beginning\n2. Delete from the end\n3. Delete at a specific position\n4. Delete all");
     int choice = scanner.nextInt();  // Choose the deletion option

     if (start == null) {
         System.out.println("List is empty.");
         return;
     }

     switch (choice) {
         case 1:  // Delete from the beginning
             System.out.println("Deleted element: " + start.data);
             if (start == last) {
                 start = last = null;  // If there is only one node, the list becomes empty
             } else {
                 start = start.next;     // Move start to the next node
                 start.prev = last;      // Set the previous of the new start to last
                 last.next = start;      // Set last's next to the new start
             }
             break;

         case 2:  // Delete from the end
             System.out.println("Deleted element: " + last.data);
             if (start == last) {
                 start = last = null;  // If there is only one node, the list becomes empty
             } else {
                 last = last.prev;     // Move last to the previous node
                 last.next = start;    // Set last's next to start (circular link)
                 start.prev = last;    // Set start's prev to last
             }
             break;

         case 3:  // Delete at a specific position
             System.out.print("Enter the position for deletion (1-based index): ");
             int pos = scanner.nextInt();  // Position to delete
             if (pos <= 1) {
                 System.out.println("Invalid position.");
                 break;
             }
             CNode tempNode = start;
             for (int i = 1; i < pos && tempNode.next != start; i++) {
                 tempNode = tempNode.next;  // Traverse to the specified position
             }
             System.out.println("Deleted element: " + tempNode.data);
             tempNode.prev.next = tempNode.next;  // Bypass the node to delete it
             tempNode.next.prev = tempNode.prev;  // Bypass the node to delete it
             if (tempNode == start) {
                 start = tempNode.next;  // Update start if the first node is deleted
             }
             if (tempNode == last) {
                 last = tempNode.prev;  // Update last if the last node is deleted
             }
             break;

         case 4:  // Delete all nodes
             start = last = null;  // Set both start and last to null
             System.out.println("All elements have been deleted.");
             break;

         default:
             System.out.println("Invalid choice.");
     }
 }
}

//Main class to test the Circular Doubly Linked List operations
public class CircularLinkedList {
 public static void main(String[] args) {
     CircularDoublyLinkedList list = new CircularDoublyLinkedList();
     Scanner scanner = new Scanner(System.in);
     System.out.println("***** Operations on Circular Doubly Linked List *****");
     System.out.println("1: Create\n2: Insert\n3: Delete\n4: Display\n5: Exit");

     while (true) {
         System.out.print("Enter your choice: ");
         int choice = scanner.nextInt();  // Get user's choice for operation
         switch (choice) {
             case 1:
                 list.create();  // Create the circular doubly linked list
                 break;
             case 2:
                 list.insert();  // Insert a node
                 break;
             case 3:
                 list.delete();  // Delete a node
                 break;
             case 4:
                 list.display();  // Display the list
                 break;
             case 5:
                 System.out.println("Exiting...");
                 scanner.close();
                 System.exit(0);  // Exit the program
             default:
                 System.out.println("Invalid choice.");
         }
     }
 }
}