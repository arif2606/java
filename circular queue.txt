package pratical2;

import java.util.Scanner;

public class CircularQueue {
    private int[] queueArray;
    private int maxSize;
    private int front;
    private int rear;
    private int itemCount;

    // Constructor to initialize the circular queue
    public CircularQueue(int size) {
        maxSize = size;
        queueArray = new int[maxSize];
        front = 0;
        rear = -1;
        itemCount = 0;
    }

    // Enqueue operation (adding an element to the queue)
    public void enqueue(int value) {
        if (isFull()) {
            System.out.println("Queue is full! Cannot enqueue " + value);
        } else {
            rear = (rear + 1) % maxSize;  // Circular move of rear
            queueArray[rear] = value;
            itemCount++;
            System.out.println(value + " added to the queue.");
        }
    }

    // Dequeue operation (removing an element from the queue)
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty! Cannot dequeue.");
            return -1;
        } else {
            int dequeuedValue = queueArray[front];
            front = (front + 1) % maxSize;  // Circular move of front
            itemCount--;
            System.out.println(dequeuedValue + " removed from the queue.");
            return dequeuedValue;
        }
    }

    // Peek operation (view the front element)
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return -1;
        }
        return queueArray[front];
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return itemCount == 0;
    }

    // Check if the queue is full
    public boolean isFull() {
        return itemCount == maxSize;
    }

    // Display the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            System.out.print("Queue contents: ");
            int current = front;
            for (int i = 0; i < itemCount; i++) {
                System.out.print(queueArray[current] + " ");
                current = (current + 1) % maxSize;  // Circular move to next element
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the circular queue: ");
        int size = scanner.nextInt();
        CircularQueue queue = new CircularQueue(size);

        int choice;
        do {
            System.out.println("\nMenu:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Display");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value to enqueue: ");
                    int value = scanner.nextInt();
                    queue.enqueue(value);
                    break;
                case 2:
                    queue.dequeue();
                    break;
                case 3:
                    int frontElement = queue.peek();
                    if (frontElement != -1) {
                        System.out.println("Front element: " + frontElement);
                    }
                    break;
                case 4:
                    queue.display();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid option.");
            }
        } while (choice != 5);
        scanner.close();
    }
}
