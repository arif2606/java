import java.util.*;

public class DFS {
    private int vertices; // Number of vertices in the graph
    private int[][] adjMatrix; // Adjacency matrix representation of the graph

    // Constructor to initialize the graph
    public DFS(int vertices) {
        this.vertices = vertices; // Set the number of vertices
        adjMatrix = new int[vertices][vertices]; // Initialize the adjacency matrix
    }

    // Method to add an edge to the graph
    public void addEdge(int src, int dest) {
        adjMatrix[src][dest] = 1; // Mark the edge from src to dest in the adjacency matrix
        adjMatrix[dest][src] = 1; // Since it's an undirected graph, mark both directions
    }

    // Depth-First Search traversal starting from a given vertex
    public void DFS(int startVertex) {
        boolean[] visited = new boolean[vertices]; // Array to track visited vertices
        // Start the DFS from the startVertex
        DFSUtil(startVertex, visited);
    }

    // Utility function for DFS (used for recursion)
    private void DFSUtil(int vertex, boolean[] visited) {
        // Mark the current vertex as visited
        visited[vertex] = true;
        // Print the current vertex as part of DFS traversal
        System.out.print(vertex + " ");

        // Recur for all adjacent vertices of the current vertex
        for (int i = 0; i < vertices; i++) {
            // If there's an edge between vertex and i, and i is not visited yet
            if (adjMatrix[vertex][i] == 1 && !visited[i]) {
                // Call DFS recursively for the unvisited adjacent vertex
                DFSUtil(i, visited);
            }
        }
    }

    // Main method to run the DFS algorithm
    public static void main(String[] args) {
        DFS g = new DFS(6); // Create a graph with 6 vertices

        // Adding edges to the graph (undirected edges)
        g.addEdge(0, 1); // Edge between vertex 0 and vertex 1
        g.addEdge(0, 2); // Edge between vertex 0 and vertex 2
        g.addEdge(1, 3); // Edge between vertex 1 and vertex 3
        g.addEdge(1, 4); // Edge between vertex 1 and vertex 4
        g.addEdge(2, 5); // Edge between vertex 2 and vertex 5

        // Print the result of DFS starting from vertex 0
        System.out.println("Depth-First Search starting from vertex 0:");
        g.DFS(0); // Perform DFS starting from vertex 0
    }
}
