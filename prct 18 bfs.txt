import java.util.*;
class BFS {
private int vertices; // Number of vertices
private int[][] adjMatrix; // Adjacency matrix representation of the graph
// Constructor to initialize the graph
public BFS(int vertices) {
this.vertices = vertices;
adjMatrix = new int[vertices][vertices]; // Initialize the adjacency matrix
}
// Method to add an edge to the graph
public void addEdge(int src, int dest) {
adjMatrix[src][dest] = 1; // Mark the edge in the matrix
adjMatrix[dest][src] = 1; // Since it's an undirected graph, mark both directions
}
// BFS traversal starting from a given node
public void BFS(int startVertex) {
boolean[] visited = new boolean[vertices]; // Visited array to track visited vertices
int[] queue = new int[vertices]; // Simulate a queue using an array
int front = 0, rear = 0;
// Start by marking the start vertex as visited and enqueue it
visited[startVertex] = true;
queue[rear++] = startVertex;
// Process the graph
while (front < rear) {
int vertex = queue[front++]; // Dequeue the vertex (increment front)
// Print the dequeued vertex
System.out.print(vertex + " ");
// Check all adjacent vertices of the dequeued vertex
for (int i = 0; i < vertices; i++) {
// If the vertex is adjacent and has not been visited
if (adjMatrix[vertex][i] == 1 && !visited[i]) {
visited[i] = true; // Mark as visited
queue[rear++] = i; // Enqueue the adjacent vertex
} } } }
public static void main(String[] args) {
BFS g = new BFS(6); // Create a graph with 6 vertices
// Adding edges to the graph
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 3);
g.addEdge(1, 4);
g.addEdge(2, 5);
System.out.println("Breadth-First Search starting from vertex 0:");
g.BFS(0); // Perform BFS starting from vertex 0
}
}